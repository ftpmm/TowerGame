// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace lzengine
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SkillTable : ITableObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public ITableObject InitTable(ByteBuffer _bb) { return SkillTable.GetRoot( _bb, this); }
  public static SkillTable GetRoot(ByteBuffer _bb) { return GetRoot(_bb, new SkillTable()); }
  public static SkillTable GetRoot(ByteBuffer _bb, SkillTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Verify(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, SkillTableVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public lzengine.SkillItem? Datas(int j) { int o = __p.__offset(4); return o != 0 ? (lzengine.SkillItem?)(new lzengine.SkillItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatasLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public lzengine.SkillItem? DatasByKey(int key) { int o = __p.__offset(4); return o != 0 ? lzengine.SkillItem.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<lzengine.SkillTable> Create(FlatBufferBuilder builder,
      VectorOffset datasOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SkillTable.AddDatas(builder, datasOffset);
    return SkillTable.End(builder);
  }

  public static void Start(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatas(FlatBufferBuilder builder, VectorOffset datasOffset) { builder.AddOffset(0, datasOffset.Value, 0); }
  public static VectorOffset CreateDatasVector(FlatBufferBuilder builder, Offset<lzengine.SkillItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, Offset<lzengine.SkillItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<lzengine.SkillItem>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<lzengine.SkillItem>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDatasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<lzengine.SkillTable> End(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<lzengine.SkillTable>(o);
  }
  public static void Finish(FlatBufferBuilder builder, Offset<lzengine.SkillTable> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixed(FlatBufferBuilder builder, Offset<lzengine.SkillTable> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class SkillTableVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Datas*/, lzengine.SkillItemVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SkillItem : ITableObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public ITableObject InitTable(ByteBuffer _bb) { return SkillItem.GetRoot( _bb, this); }
  public static SkillItem GetRoot(ByteBuffer _bb) { return GetRoot(_bb, new SkillItem()); }
  public static SkillItem GetRoot(ByteBuffer _bb, SkillItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string _Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_NameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? Get_NameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] Get_NameArray() { return __p.__vector_as_array<byte>(6); }
  public string _Description { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_DescriptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? Get_DescriptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] Get_DescriptionArray() { return __p.__vector_as_array<byte>(8); }
  public int _Cooltime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int _Costsp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float _Attackdistance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float _Attackangle { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string _Attacktargettags(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int _AttacktargettagsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string _Impacttype(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int _ImpacttypeLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int _Nextbattlerid { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float _Atkratio { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float _Durationtime { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float _Atkinterval { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string _Skillprefab { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_SkillprefabBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? Get_SkillprefabBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] Get_SkillprefabArray() { return __p.__vector_as_array<byte>(30); }
  public string _Animationname { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_AnimationnameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? Get_AnimationnameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] Get_AnimationnameArray() { return __p.__vector_as_array<byte>(32); }
  public string _Hitfxprefab { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_HitfxprefabBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? Get_HitfxprefabBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] Get_HitfxprefabArray() { return __p.__vector_as_array<byte>(34); }
  public int _Level { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int _Attacktype { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int _Selectortype { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<lzengine.SkillItem> Create(FlatBufferBuilder builder,
      int _id = 0,
      StringOffset _nameOffset = default(StringOffset),
      StringOffset _descriptionOffset = default(StringOffset),
      int _cooltime = 0,
      int _costsp = 0,
      float _attackdistance = 0.0f,
      float _attackangle = 0.0f,
      VectorOffset _attacktargettagsOffset = default(VectorOffset),
      VectorOffset _impacttypeOffset = default(VectorOffset),
      int _nextbattlerid = 0,
      float _atkratio = 0.0f,
      float _durationtime = 0.0f,
      float _atkinterval = 0.0f,
      StringOffset _skillprefabOffset = default(StringOffset),
      StringOffset _animationnameOffset = default(StringOffset),
      StringOffset _hitfxprefabOffset = default(StringOffset),
      int _level = 0,
      int _attacktype = 0,
      int _selectortype = 0) {
    builder.StartTable(19);
    SkillItem.Add_Selectortype(builder, _selectortype);
    SkillItem.Add_Attacktype(builder, _attacktype);
    SkillItem.Add_Level(builder, _level);
    SkillItem.Add_Hitfxprefab(builder, _hitfxprefabOffset);
    SkillItem.Add_Animationname(builder, _animationnameOffset);
    SkillItem.Add_Skillprefab(builder, _skillprefabOffset);
    SkillItem.Add_Atkinterval(builder, _atkinterval);
    SkillItem.Add_Durationtime(builder, _durationtime);
    SkillItem.Add_Atkratio(builder, _atkratio);
    SkillItem.Add_Nextbattlerid(builder, _nextbattlerid);
    SkillItem.Add_Impacttype(builder, _impacttypeOffset);
    SkillItem.Add_Attacktargettags(builder, _attacktargettagsOffset);
    SkillItem.Add_Attackangle(builder, _attackangle);
    SkillItem.Add_Attackdistance(builder, _attackdistance);
    SkillItem.Add_Costsp(builder, _costsp);
    SkillItem.Add_Cooltime(builder, _cooltime);
    SkillItem.Add_Description(builder, _descriptionOffset);
    SkillItem.Add_Name(builder, _nameOffset);
    SkillItem.Add_Id(builder, _id);
    return SkillItem.End(builder);
  }

  public static void Start(FlatBufferBuilder builder) { builder.StartTable(19); }
  public static void Add_Id(FlatBufferBuilder builder, int _Id) { builder.AddInt(0, _Id, 0); }
  public static void Add_Name(FlatBufferBuilder builder, StringOffset _NameOffset) { builder.AddOffset(1, _NameOffset.Value, 0); }
  public static void Add_Description(FlatBufferBuilder builder, StringOffset _DescriptionOffset) { builder.AddOffset(2, _DescriptionOffset.Value, 0); }
  public static void Add_Cooltime(FlatBufferBuilder builder, int _Cooltime) { builder.AddInt(3, _Cooltime, 0); }
  public static void Add_Costsp(FlatBufferBuilder builder, int _Costsp) { builder.AddInt(4, _Costsp, 0); }
  public static void Add_Attackdistance(FlatBufferBuilder builder, float _Attackdistance) { builder.AddFloat(5, _Attackdistance, 0.0f); }
  public static void Add_Attackangle(FlatBufferBuilder builder, float _Attackangle) { builder.AddFloat(6, _Attackangle, 0.0f); }
  public static void Add_Attacktargettags(FlatBufferBuilder builder, VectorOffset _AttacktargettagsOffset) { builder.AddOffset(7, _AttacktargettagsOffset.Value, 0); }
  public static VectorOffset Create_AttacktargettagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset Create_AttacktargettagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset Create_AttacktargettagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset Create_AttacktargettagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void Start_AttacktargettagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void Add_Impacttype(FlatBufferBuilder builder, VectorOffset _ImpacttypeOffset) { builder.AddOffset(8, _ImpacttypeOffset.Value, 0); }
  public static VectorOffset Create_ImpacttypeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset Create_ImpacttypeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset Create_ImpacttypeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset Create_ImpacttypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void Start_ImpacttypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void Add_Nextbattlerid(FlatBufferBuilder builder, int _Nextbattlerid) { builder.AddInt(9, _Nextbattlerid, 0); }
  public static void Add_Atkratio(FlatBufferBuilder builder, float _Atkratio) { builder.AddFloat(10, _Atkratio, 0.0f); }
  public static void Add_Durationtime(FlatBufferBuilder builder, float _Durationtime) { builder.AddFloat(11, _Durationtime, 0.0f); }
  public static void Add_Atkinterval(FlatBufferBuilder builder, float _Atkinterval) { builder.AddFloat(12, _Atkinterval, 0.0f); }
  public static void Add_Skillprefab(FlatBufferBuilder builder, StringOffset _SkillprefabOffset) { builder.AddOffset(13, _SkillprefabOffset.Value, 0); }
  public static void Add_Animationname(FlatBufferBuilder builder, StringOffset _AnimationnameOffset) { builder.AddOffset(14, _AnimationnameOffset.Value, 0); }
  public static void Add_Hitfxprefab(FlatBufferBuilder builder, StringOffset _HitfxprefabOffset) { builder.AddOffset(15, _HitfxprefabOffset.Value, 0); }
  public static void Add_Level(FlatBufferBuilder builder, int _Level) { builder.AddInt(16, _Level, 0); }
  public static void Add_Attacktype(FlatBufferBuilder builder, int _Attacktype) { builder.AddInt(17, _Attacktype, 0); }
  public static void Add_Selectortype(FlatBufferBuilder builder, int _Selectortype) { builder.AddInt(18, _Selectortype, 0); }
  public static Offset<lzengine.SkillItem> End(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<lzengine.SkillItem>(o);
  }

  public static VectorOffset CreateSortedVectorOfSkillItem(FlatBufferBuilder builder, Offset<SkillItem>[] offsets) {
    Array.Sort(offsets,
      (Offset<SkillItem> o1, Offset<SkillItem> o2) =>
        new SkillItem().__assign(builder.DataBuffer.Length - o1.Value, builder.DataBuffer)._Id.CompareTo(new SkillItem().__assign(builder.DataBuffer.Length - o2.Value, builder.DataBuffer)._Id));
    return builder.CreateVectorOfTables(offsets);
  }

  public static SkillItem? __lookup_by_key(int vectorLocation, int key, ByteBuffer bb) {
    SkillItem obj_ = new SkillItem();
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      obj_.__assign(tableOffset, bb);
      int comp = obj_._Id.CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return obj_;
      }
    }
    return null;
  }
}


static public class SkillItemVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*_Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*_Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*_Description*/, false)
      && verifier.VerifyField(tablePos, 10 /*_Cooltime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*_Costsp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*_Attackdistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*_Attackangle*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*_Attacktargettags*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*_Impacttype*/, false)
      && verifier.VerifyField(tablePos, 22 /*_Nextbattlerid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*_Atkratio*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*_Durationtime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*_Atkinterval*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*_Skillprefab*/, false)
      && verifier.VerifyString(tablePos, 32 /*_Animationname*/, false)
      && verifier.VerifyString(tablePos, 34 /*_Hitfxprefab*/, false)
      && verifier.VerifyField(tablePos, 36 /*_Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*_Attacktype*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*_Selectortype*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
