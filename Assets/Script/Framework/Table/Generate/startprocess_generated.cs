// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace lzengine
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct StartprocessTable : ITableObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public ITableObject InitTable(ByteBuffer _bb) { return StartprocessTable.GetRoot( _bb, this); }
  public static StartprocessTable GetRoot(ByteBuffer _bb) { return GetRoot(_bb, new StartprocessTable()); }
  public static StartprocessTable GetRoot(ByteBuffer _bb, StartprocessTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Verify(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, StartprocessTableVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StartprocessTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public lzengine.StartprocessItem? Datas(int j) { int o = __p.__offset(4); return o != 0 ? (lzengine.StartprocessItem?)(new lzengine.StartprocessItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatasLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public lzengine.StartprocessItem? DatasByKey(int key) { int o = __p.__offset(4); return o != 0 ? lzengine.StartprocessItem.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<lzengine.StartprocessTable> Create(FlatBufferBuilder builder,
      VectorOffset datasOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StartprocessTable.AddDatas(builder, datasOffset);
    return StartprocessTable.End(builder);
  }

  public static void Start(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatas(FlatBufferBuilder builder, VectorOffset datasOffset) { builder.AddOffset(0, datasOffset.Value, 0); }
  public static VectorOffset CreateDatasVector(FlatBufferBuilder builder, Offset<lzengine.StartprocessItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, Offset<lzengine.StartprocessItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<lzengine.StartprocessItem>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<lzengine.StartprocessItem>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDatasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<lzengine.StartprocessTable> End(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<lzengine.StartprocessTable>(o);
  }
  public static void Finish(FlatBufferBuilder builder, Offset<lzengine.StartprocessTable> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixed(FlatBufferBuilder builder, Offset<lzengine.StartprocessTable> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class StartprocessTableVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Datas*/, lzengine.StartprocessItemVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct StartprocessItem : ITableObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public ITableObject InitTable(ByteBuffer _bb) { return StartprocessItem.GetRoot( _bb, this); }
  public static StartprocessItem GetRoot(ByteBuffer _bb) { return GetRoot(_bb, new StartprocessItem()); }
  public static StartprocessItem GetRoot(ByteBuffer _bb, StartprocessItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StartprocessItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int _Machineid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string _Innerport { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_InnerportBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? Get_InnerportBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] Get_InnerportArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<lzengine.StartprocessItem> Create(FlatBufferBuilder builder,
      int _id = 0,
      int _machineid = 0,
      StringOffset _innerportOffset = default(StringOffset)) {
    builder.StartTable(3);
    StartprocessItem.Add_Innerport(builder, _innerportOffset);
    StartprocessItem.Add_Machineid(builder, _machineid);
    StartprocessItem.Add_Id(builder, _id);
    return StartprocessItem.End(builder);
  }

  public static void Start(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void Add_Id(FlatBufferBuilder builder, int _Id) { builder.AddInt(0, _Id, 0); }
  public static void Add_Machineid(FlatBufferBuilder builder, int _Machineid) { builder.AddInt(1, _Machineid, 0); }
  public static void Add_Innerport(FlatBufferBuilder builder, StringOffset _InnerportOffset) { builder.AddOffset(2, _InnerportOffset.Value, 0); }
  public static Offset<lzengine.StartprocessItem> End(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<lzengine.StartprocessItem>(o);
  }

  public static VectorOffset CreateSortedVectorOfStartprocessItem(FlatBufferBuilder builder, Offset<StartprocessItem>[] offsets) {
    Array.Sort(offsets,
      (Offset<StartprocessItem> o1, Offset<StartprocessItem> o2) =>
        new StartprocessItem().__assign(builder.DataBuffer.Length - o1.Value, builder.DataBuffer)._Id.CompareTo(new StartprocessItem().__assign(builder.DataBuffer.Length - o2.Value, builder.DataBuffer)._Id));
    return builder.CreateVectorOfTables(offsets);
  }

  public static StartprocessItem? __lookup_by_key(int vectorLocation, int key, ByteBuffer bb) {
    StartprocessItem obj_ = new StartprocessItem();
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      obj_.__assign(tableOffset, bb);
      int comp = obj_._Id.CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return obj_;
      }
    }
    return null;
  }
}


static public class StartprocessItemVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*_Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*_Machineid*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*_Innerport*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
